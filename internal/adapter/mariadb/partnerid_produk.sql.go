// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: partnerid_produk.sql

package mariadb

import (
	"context"
	"database/sql"
)

const createPartnerIDProduk = `-- name: CreatePartnerIDProduk :execresult
INSERT INTO m_partnerid_produk (IDPRODUK, IDPARTNER, IDMERCHANT, PRIORITAS, STATUS)
VALUES (?,?,?,?,1)
`

type CreatePartnerIDProdukParams struct {
	Idproduk   sql.NullInt32 `json:"idproduk"`
	Idpartner  sql.NullInt32 `json:"idpartner"`
	Idmerchant sql.NullInt32 `json:"idmerchant"`
	Prioritas  sql.NullInt32 `json:"prioritas"`
}

func (q *Queries) CreatePartnerIDProduk(ctx context.Context, arg CreatePartnerIDProdukParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPartnerIDProduk,
		arg.Idproduk,
		arg.Idpartner,
		arg.Idmerchant,
		arg.Prioritas,
	)
}

const listPartnerIDProduk = `-- name: ListPartnerIDProduk :many
SELECT idpartner_produk, idproduk, idpartner, idmerchant, prioritas, status FROM m_partnerid_produk WHERE idproduk = ?
`

func (q *Queries) ListPartnerIDProduk(ctx context.Context, idproduk sql.NullInt32) ([]MPartneridProduk, error) {
	rows, err := q.db.QueryContext(ctx, listPartnerIDProduk, idproduk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MPartneridProduk{}
	for rows.Next() {
		var i MPartneridProduk
		if err := rows.Scan(
			&i.IdpartnerProduk,
			&i.Idproduk,
			&i.Idpartner,
			&i.Idmerchant,
			&i.Prioritas,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePartnerIDProduk = `-- name: UpdatePartnerIDProduk :execresult
UPDATE m_partnerid_produk
SET 
  IDPRODUK = ?, 
  IDPARTNER = ?, 
  IDMERCHANT = ?, 
  PRIORITAS = ?, 
  STATUS = ?
WHERE IDPARTNER_PRODUK = ?
`

type UpdatePartnerIDProdukParams struct {
	Idproduk        sql.NullInt32 `json:"idproduk"`
	Idpartner       sql.NullInt32 `json:"idpartner"`
	Idmerchant      sql.NullInt32 `json:"idmerchant"`
	Prioritas       sql.NullInt32 `json:"prioritas"`
	Status          sql.NullInt32 `json:"status"`
	IdpartnerProduk int32         `json:"idpartner_produk"`
}

func (q *Queries) UpdatePartnerIDProduk(ctx context.Context, arg UpdatePartnerIDProdukParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePartnerIDProduk,
		arg.Idproduk,
		arg.Idpartner,
		arg.Idmerchant,
		arg.Prioritas,
		arg.Status,
		arg.IdpartnerProduk,
	)
}
